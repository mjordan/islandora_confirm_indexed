<?php

/**
 * @file
 * Defines all the hooks this module implements, and some other functions.
 */

/**
 * Implements hook_menu().
 */
function islandora_confirm_indexed_menu() {
  $items = array();
  $items['admin/islandora/tools/confirm_indexed'] = array(
    'title' => 'Islandora Confirm Indexed',
    'description' => 'Configure Islandora Confirm Indexed.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_confirm_indexed_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin settings form builder.
 */
function islandora_confirm_indexed_admin_settings() {
  $default_log_path = drupal_realpath(file_default_scheme() . '://');
  $default_log_path .= '/islandora_confirm_indexed.txt';
  $form['islandora_confirm_indexed_log_file_path'] = array(
    '#title' => t('Log file path'),
    '#type' => 'textfield',
    '#size' => 60,
    '#default_value' => variable_get('islandora_confirm_indexed_log_file_path', $default_log_path),
    '#description' => t("Absolute file system path to the log file."),
    '#maxlength' => 255,
  );
  $form['islandora_confirm_indexed_pid_offset'] = array(
    '#title' => t('PID offset'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => variable_get('islandora_confirm_indexed_pid_offset', '10'),
    '#description' => t("Difference between the PID of the object beinig ingested
      and the one to query. For example, when object with PID foo:20 is ingested,
      PID foo:10 will be queried. We use this offset to ensure that the Solr
      indexing is complete before we issue the confirmation query."),
    '#maxlength' => 255,
  );
  $form['islandora_confirm_indexed_entry_delimiter'] = array(
    '#title' => t('Log entry delimiter'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => variable_get('islandora_confirm_indexed_entry_delimiter', ''),
    '#description' => t("String used to separate parts of the log entry. Leave
      blank to use \\t (tab)."),
    '#maxlength' => 255,
  );
  $form['islandora_confirm_indexed_include_timestamp'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include timestamp'),
    '#default_value' => variable_get('islandora_confirm_indexed_include_timestamp', 1),
    '#description' => t('Check this option if you want to include a timestamp in the log.'),
  );
  $form['islandora_confirm_indexed_include_success'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include positive queries'),
    '#default_value' => variable_get('islandora_confirm_indexed_include_success', 1),
    '#description' => t('Check this option if you want to include the results of
      positive queries in the log. Leave unchecked to log only negative queries
      (queries that did not find an object in the Solr index).'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_islandora_object_ingested().
 */
function islandora_confirm_indexed_islandora_object_ingested(FedoraObject $islandora_object) {
  $log_path = variable_get('islandora_confirm_indexed_log_file_path', '/tmp/islanodra_confirm_indexed.txt');
  $entry = array();
  $delimiter = variable_get('islandora_confirm_indexed_entry_delimiter', '');
  $offset = variable_get('islandora_confirm_indexed_pid_offset', '5');

  // PIDs increment, so we look for a PID with a lower number than
  // the current one.
  list($namespace, $number) = explode(':', $islandora_object->id);
  // But if we go below 0, just return.
  $number = $number - $offset;
  if ($number < 1) {
    return;
  }

  $found = islandora_confirm_indexed_query_solr($namespace, $number);
  if (!$found) {
    // If it's not found, confirm that the object exists before reporting
    // that it wasn't indexed.
    if ($object_to_query = islandora_object_load($namespace . ':' . $number)) {
      $entry[] = 'Not indexed';
      $entry[] = $namespace . ':' . $number;
    }
  }
  if (preg_match('/^\d\d\d$/', $found)) {
    $entry[] = 'Error';
    $entry[] = 'HTTP response ' . $found .
      ' (' . $namespace . ':' . $number . ')';
  }
  if (variable_get('islandora_confirm_indexed_include_success', 1)) {
    if ($found == $namespace . ':' . $number) {
      $entry[] = 'Indexed';
      $entry[] = $namespace . ':' . $number;
    }
  }

  if (variable_get('islandora_confirm_indexed_include_timestamp', 1)) {
    array_unshift($entry, date("Y-m-d H:i:s"));
  }

  if (!strlen($delimiter)) {
    $entry_string = implode("\t", $entry) . "\n";
  }
  else {
    $entry_string = implode($delimiter, $entry) . "\n";
  }

  // Don't write log entries that are empty or just have a timestamp.
  if (count($entry) > 1) {
    file_put_contents($log_path, $entry_string, FILE_APPEND);
  }
}

/**
 * Queries Islandora's Solr index to get a list of PIDs.
 *
 * The object is the one corresponding to the alias and pointer.
 *
 * @param string $namespace
 *   The namespace in the PID to query Solr for.
 * @param string $number
 *   The namespace in the PID to query Solr for.
 *
 * @return string|bool
 *   TRUE if the pid was found, FALSE if not, the error code
 *   if Solr returned an HTTP response other than 200.
 */
function islandora_confirm_indexed_query_solr($namespace, $number) {
  $pid = $namespace . '\:' . $number;
  $solr_url = variable_get('islandora_solr_url', 'http://localhost:8080/solr');
  if (!preg_match('#^http://#', $solr_url)) {
    $solr_url = 'http://' . $solr_url;
  }
  $pid_query = $solr_url . '/select?version=1.2&rows=1&wt=json&json.nl=map&fl=PID&q=PID:' . $pid;
  $raw_result = drupal_http_request($pid_query);
  if ($raw_result->code != 200) {
    return $raw_result->code;
  }
  $query_result = json_decode($raw_result->data);
  if ($query_result->response->numFound == 1) {
    return $query_result->response->docs[0]->PID;
  }
  else {
    return FALSE;
  }
}

/**
 * Returns a list of PIDs from a PID file.
 *
 * @param string $pid_file_path
 *   The absolute path to the PID file.
 *
 * @return array
 *   A list of PIDs.
 */
function islandora_confirm_indexed_read_pid_file($pid_file_path) {
  if (!file_exists($pid_file_path)) {
    drush_set_error('PID_FILE_NOT_FOUND',
    dt('The specified PID file (!pid_file) does not exist.',
      array('!pid_file' => $pid_file_path)));
    drupal_exit();
  }

  $pids = array();
  $lines = file($pid_file_path);
  foreach ($lines as $pid) {
    $pid = trim($pid);
    // Skip commented out rows.
    if (!preg_match('!(#|//)!', $pid)) {
      $pids[] = $pid;
    }
  }
  return $pids;
}

/**
 * Writes the log of PIDS that are not indexed.
 *
 * This log is generated by the drush command and is separate from the log
 * created in islandora_confirm_indexed_islandora_object_ingested().
 *
 * @param string $pid
 *   The PID of the object that is not indexed in Solr.
 */
function islandora_confirm_indexed_write_log($pid) {
  if (drush_get_option('unindexed_log')) {
    $log_path = drush_get_option('unindexed_log');
    file_put_contents($log_path, $pid . PHP_EOL, FILE_APPEND);
  }
}
